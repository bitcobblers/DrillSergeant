name: deploy

on:
  workflow_call:
    outputs:
      version:
        description: "The version for the assembly"
        value: ${{ jobs.nuget.outputs.version }}
      package-version:
        description: "The version for the package"
        value: ${{ jobs.nuget.outputs.package-version }}

permissions:
  actions: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  DOTNET_NOLOGO: true
  packages-directory: ${{ github.workspace }}/Artifacts/Packages

jobs:
  nuget:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.calculate-version.outputs.VERSION }}
      package-version: ${{ steps.calculate-version.outputs.PACKAGE_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          show-progress: false
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x
            7.0.x

      - name: Restore Packages
        run: dotnet restore

      - name: Build Solution
        run: dotnet build --no-restore --configuration Release

      - name: Calculate Package Version
        id: calculate-version
        shell: pwsh
        run: |
          function saveOutput($name, $value) {
            echo "Saving output: $name=$value"
            echo "$name=$value" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8NoBom -Append
          }
          
          $packageVersion = if ($env:GitVersion_TagName) {
            $env:GitVersion_MajorMinorPatch + '-' + $env:GitVersion_TagName
          } else {
            $env:GitVersion_SemVer
          }
          
          saveOutput 'VERSION' $env:GitVersion_MajorMinorPatch
          saveOutput 'PACKAGE_VERSION' $packageVersion

      - name: Create Packages
        shell: pwsh
        run: |
          $packArgs = @(
            '--no-restore',
            '--no-build',
            '--configuration', 'Release',
            '--output', '${{ env.packages-directory }}',
            ('--property:Version=' + '${{ steps.calculate-version.outputs.PACKAGE_VERSION }}')
          )
          
          dotnet pack @packArgs

      - name: Push Packages
        shell: pwsh
        env:
          NUGET_SOURCE: https://api.nuget.org/v3/index.json
        run: |
          Get-ChildItem -Path ${{ env.packages-directory }} *.nupkg | ForEach-Object {
            $pushArgs = @(
              $_.FullName,
              '--source', '${{ env.NUGET_SOURCE }}',
              '--api-key', '${{ secrets.NUGET_API_KEY }}',
              '--skip-duplicate'
            )
          
            dotnet nuget push @pushArgs
          }

  pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
