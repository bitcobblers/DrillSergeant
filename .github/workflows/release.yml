name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version type (major, minor, or patch)"
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - none

jobs:
  cicd:
    uses: ./.github/workflows/cicd.yml
    secrets: inherit

  calculate-version:
    uses: ./.github/workflows/calculate-version.yml
    with:
      version: ${{ inputs.version }}

  build-package:
    needs: [calculate-version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Cache Packages
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/Artifacts/Packages
          key: ${{ runner.os }}-packages-${{ needs.calculate-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-packages-

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x
            7.0.x

      - name: Build and Test
        env:
          DOTNET_NOLOGO: true
          logger: GitHubActions;report-warnings=false
          packages-directory: ${{ github.workspace }}/Artifacts/Packages
          assembly-version: ${{ format('{0}.0', needs.calculate-version.outputs.version) }}
          file-version: ${{ format('{0}.0', needs.calculate-version.outputs.version) }}
        shell: pwsh
        run: |
          dotnet build `
            --configuration Release `
            /property:ContinuousIntegrationBuild=true

          dotnet test `
            --no-restore ` 
            --no-build `
            --configuration Release `
            --logger:"${{ env.logger }}" `
            /property:AssemblyVersion=${{ env.assembly-version }} `
            /property:FileVersion=${{ env.file-version }}
            
          dotnet pack `
            --no-restore `
            --no-build `
            --include-symbols ` 
            --configuration Release ` 
            --output ${{ env.packages-directory }} `
            /property:Version=${{ needs.calculate-version.outputs.version }}

  push-packages:
    needs: [ build-package, create-tags ]
    runs-on: ubuntu-latest
    steps:
      - name: Restore Packages
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/Artifacts/Packages
          key: ${{ runner.os }}-packages-${{ needs.calculate-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-packages-

      - name: Push Packages
        shell: pwsh
        env:
          NUGET_SOURCE: https://api.nuget.org/v3/index.json
        run: |
            $packages = Get-ChildItem -Path $env:GITHUB_WORKSPACE/Artifacts/Packages -Filter *.nupkg -Recurse
            foreach($package in $packages) {
                Write-Output "Pushing package: $package"
                # dotnet nuget push $package.FullName --source $env:NUGET_SOURCE --api-key ${{ secrets.NUGET_API_KEY }}
            }

  create-tags:
    needs: [ calculate-version, build-package, cicd ]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Git
        run: |
          git config user.name '${{ github.actor }}'
          git config user.email '${{ github.actor }}@bitcobblers.com'

      - name: Create Tags
        run: |
          echo "New tagged version: $tagName"
          git tag ${{ needs.calculate-version.outputs.tag-name }}
          git push origin ${{ needs.calculate-version.outputs.tag-name }}

  create-release:
    needs: [calculate-version, push-packages]
    runs-on: ubuntu-latest

    steps:
      - name: Create Release
        uses: actions/github-script@v6
        with:
          script: |
            await github.request('POST /repos/{owner}/{repo}/releases', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              target_commitish: "${{ github.sha }}",
              name: "${{ needs.calculate-version.outputs.version }}"
              tag-name: "${{ needs.calculate-version.outputs.tag-name }}",
              generate_release_notes: true,
              draft: false
            });
