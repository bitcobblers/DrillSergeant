name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version type (major, minor, or patch)"
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  bump:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.DS_PUSH_KEY }}
          show-progress: false
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name 'Bitcobblers'
          git config user.email 'admin@bitcobblers.com'      
          
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: '5.x'
      
      - name: Get Current Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2
        
      - name: Create New Tag
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.DS_PUSH_KEY }}
        run: |
          function bumpVersion($comp, $value) { 
            if($comp -eq '${{ inputs.version }}') {
              return [int]$value + 1
            }
            else {
              return $value
            }
          }
          
          $version = [version]"$env:GitVersion_Major.$env:GitVersion_Minor.$env:GitVersion_Patch"
          $major = bumpVersion 'major' $version.Major
          $minor = bumpVersion 'minor' $version.Minor
          $patch = bumpVersion 'patch' $version.Build

          $newVersion = "$major.$minor.$patch"
          $tagName = "v$newVersion"

          Write-Output "New tagged version: $tagName"
          # & git tag -a $tagName -m "Create release for $tagName"
          & git tag $tagName
          & git push origin $tagName
          
          @(
            "VERSION=$newVersion",
            "TAG_NAME=$tagName"
          ) | Out-File -Append $env:GITHUB_ENV
          
      - name: Create Release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.request('POST /repos/{owner}/{repo}/releases', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              target_commitish: "${{ github.sha }}",
              name: "${{ env.VERSION }}",
              tag_name: "${{ env.TAG_NAME }}",
              generate_release_notes: true,
              draft: false
            });
